??if
??conditionals
?cat
list(1,2,3,4,5)
?nchar
nchar("hello")
nchar("hello there")
seq_along(5)
seq(5)
seq_along(3:5)
?seq_along
?length.out
?paste0
?sd
getwd()
setwd(..)
setwd(../)
setwd(..\)
setwd("..")
getwd()
dir
dir()
setwd("Projects")
getwd()
ls
dir()
dir.create("R-Classifier-with-NN")
dir
dir()
setwd("R-Classifier-with-NN/")
install.packages("tidyverse")
pwd
getwd()
file.create("mycode.R")
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(readr)
read_csv("Data/Iris.csv")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
file.create("Iris-practice.Rmd")
#Load the Tidyverse
library(tidyverse)
# Import the Data
read_csv("Data/Iris.csv")
# Import the Data
iris_raw <- read_csv("Data/Iris.csv")
iris_raw
colnames(iris_raw)
?rename
colnames(iris_raw)
iris_df <- iris_raw %>%
rename(SepalLengthCm = Sepal-Length)
iris_df <- iris_raw %>%
rename(SepalLengthCm = Sepal-Length)
iris_df <- iris_raw %>%
rename(Sepal-Length = SepalLengthCm)
iris_df
iris
iris_df <- iris_raw
rename(iris_df, petal_length = PetalLengthCm)
iris_df
iris_df <- iris_raw %>%
rename(petal_length = PetalLengthCm)
iris_df
iris
df = iris
?sd
?rm
rm
rm(list = ls())
df = iris
View(df)
str(df)
View(df)
View(df)
library(tidyverse)
df <- iris
df <- iris
df <- iris
df
summary(df)
str(df)
glimpse(df)
str(df)
df <- iris
head(df)
df_long <- df %>%
gather(key = Part_Measure, value = Value, -Species) %>% #Gather columns
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\,") #Break gathered column into two columns
head(df_long)
df_long <- df %>%
gather(key = Part_Measure, value = Value, -Species) %>% #Gather columns
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") #Break gathered column into two columns
head(df_long)
df_wide <- df_long %>%
spread(Measure, Value)
df_wide <- df_long %>%
spread(key = Measure, value = Value)
View(df_long)
View(df_long)
df_long <- df %>%
gather(key = Part_Measure, value = Value, -Species) %>% #Gather columns
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") #Break gathered column into two columns
df_long$Measure <- as.factor(df_long$Measure)
head(df_long)
df_wide <- df_long %>%
spread(key = Measure, value = Value)
test <- iris %>%
gather(key = Part_Measure, value = Value, Species) %>%
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") %>%
spread(key = Measure, value = Value)
View(df_long)
iris
df_long <- df %>%
gather(key = Part_Measure, value = Value, -Species) %>% #Gather columns
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") #Break gathered column into two columns
df_long$Measure <- as.factor(df_long$Measure)
df_long$FlowerID <- 1:nrow(df_long)
head(df_long)
df_wide <- df_long %>%
spread(key = Measure, value = Value)
head(df_wide)
df_long <- df %>%
gather(key = Part_Measure, value = Value, -Species) %>% #Gather columns
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") #Break gathered column into two columns
df_long$Measure <- as.factor(df_long$Measure)
head(df_long)
df_wide <- df #%>%
#spread(key = Measure, value = Value)
head(df_wide)
df$FlowerID <- 1:nrow(df)
df_wide <- df
head(df_wide)
df$FlowerID <- 1:nrow(df)
df_wide <- df %>%
gather(key = Part_Measure, value = Value, -Species, -FlowerID) %>%
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") %>%
spread(key = Measure, value = Value)
head(df_wide)
ggplot(df_long, aes(x = Species, y = Value, col = Part)) +
geom_jitter()+
facet_grid(. ~ Measure)
ggplot(df_wide, aes(x = length, y = width, col = Part)) +
geom_jitter() +
facet_grid(. ~ Species)
ggplot(df_wide, aes(x = Length, y = Width, col = Part)) +
geom_jitter() +
facet_grid(. ~ Species)
ggplot(df_wide, aes(x=Length, y = Width, col = Species)) +
geom_jitter() +
facet_grid(. ~ Part)
ggplot(df_wide, aes(x=Length, y = Width, col = Species)) +
geom_point() +
facet_grid(. ~ Part)
ggplot(df_wide, aes(x=Length, y = Width, col = Species)) +
geom_jitter() +
facet_grid(. ~ Part)
ggplot(df_long, aes(x = Part, y = Value, col = Species)) +
geom_jitter() +
facet_grid(. ~ Measure)
ggplot(df_wide, aes(x = Length, y = Width, col = Part)) +
geom_jitter() +
facet_grid(. ~ Species)
ggplot(df_wide, aes(x=Length, y = Width, col = Species)) +
geom_jitter() +
facet_grid(. ~ Part)
ggplot(df_long, aes(x = Species, y = Value, col = Part)) +
geom_point()+
facet_grid(. ~ Measure)
ggplot(df_long, aes(x = Species, y = Value, col = Part)) +
geom_jitter()+
facet_grid(. ~ Measure)
library(R6)
?~
help(~)
??~
test <- iris$Sepal.Length * iris$Sepal.Width
test
class(test)
test[1]
df$test <- iris$Sepal.Length * iris$Sepal.Width
View(df)
View(df)
?exp
sigmoid <- function(x) {
1/(1+exp(-x))
}
View(sigmoid)
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
View(sigmoid)
View(d_sigmoid)
sigmoid(2)
d_sigmoid(2)
?nrows
?count
?length
length(c(2,3,4))
??nrow
nrow(c(2,3,4))
nrow(list(2,3,4))
list(2,3,4)
matrix(2,3,4)
nrow(matrix(2,3,4))
nrow(df)
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
cross_entropy <- function(pred, real) {
n_samples <- nrows(real)
res <- pred - real
res/n_samples
}
cross_entropy(df$Sepal.Length,df$Sepal.Length)
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
cross_entropy <- function(pred, real) {
n_samples <- nrow(real)
res <- pred - real
res/n_samples
}
cross_entropy(df$Sepal.Length,df$Sepal.Length)
cross_entropy(df$Sepal.Length,df$Sepal.Width)
cross_entropy(df$Sepal.Length,df$Sepal.Width)
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
cross_entropy <- function(pred, real) {
n_samples <- nrow(real)
message(n_samples)
res <- pred - real
message(res)
res/n_samples
}
cross_entropy(df$Sepal.Length, df$Sepal.Length)
nrow(df$Sepal.Length)
nrow$df
nrow(df)
df$Sepal.Length
df[,1]
df[,1:2]
class(df[,1:2])
class(df[,1])
df$Sepal.Length
df$Sepal.Length *df$Sepal.Length
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
cross_entropy <- function(pred, real) {
n_samples <- length(real)
message(n_samples)
res <- pred - real
message(res)
res/n_samples
}
cross_entropy(df$Sepal.Length, df$Sepal.Length)
max(test)
max(c(2,3,11,2))
sum(c(2,3,4))
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
softmax <- function(x) {
exps <- exp(x-max(x))
exps/sum(exps)
}
cross_entropy <- function(pred, real) {
n_samples <- length(real)
res <- pred - real
res/n_samples
}
softmax(c(1,2,3))
sum(softmax(c(1,2,3)))
sum(softmax(c(1,2,3,4,5,6)))
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
softmax <- function(x) {
exps <- exp(x-max(x))
exps/sum(exps)
}
cross_entropy <- function(pred, real) {
n_samples <- length(real)
res <- pred - real
res/n_samples
}
View(df)
View(df)
library(tidyverse)
df <- iris
str(df)
head(df)
df_long <- df %>%
gather(key = Part_Measure, value = Value, -Species) %>% #Gather columns
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") #Break gathered column into two columns
df_long$Measure <- as.factor(df_long$Measure)
head(df_long)
df$FlowerID <- 1:nrow(df)
df_wide <- df %>%
gather(key = Part_Measure, value = Value, -Species, -FlowerID) %>%
separate(col = Part_Measure, into = c("Part", "Measure"), sep = "\\.") %>%
spread(key = Measure, value = Value)
head(df_wide)
ggplot(df_long, aes(x = Species, y = Value, col = Part)) +
geom_jitter()+
facet_grid(. ~ Measure)
ggplot(df_wide, aes(x = Length, y = Width, col = Part)) +
geom_jitter() +
facet_grid(. ~ Species)
ggplot(df_wide, aes(x=Length, y = Width, col = Species)) +
geom_jitter() +
facet_grid(. ~ Part)
library(R6)
sigmoid <- function(x) {
1/(1+exp(-x))
}
d_sigmoid <- function(x) {
sigmoid(x)*(1-sigmoid(x))
}
softmax <- function(x) {
exps <- exp(x-max(x))
exps/sum(exps)
}
cross_entropy <- function(pred, real) {
n_samples <- length(real)
res <- pred - real
res/n_samples
}
View(df)
View(df)
?shape
?dim
dim(df)
dim(df)[1]
dim(df)[2]
randn(4,5)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
?rnorm
dim(df$Species)
dim(df$Species)
dim(df)
df[,1, replace = FALSE]
df[,1, drop = FALSE]
data.matrix(df[,1, drop = FALSE])
rnorm(5)
?matrix
matrix(rnorm(4*5), 4, 5)
matrix(rnorm(), 4, 5)
matrix(rnorm(4*7), 4, 5)
matrix(rnorm(4*5), 4, 5)
matrix(rnorm(5*3), 5, 3)
matrix(0,1,5)
test <- data.matrix(df)
test
test[,1]
test[,1,drop=FALSE]
class(test[,1,drop=FALSE])
test[,1,drop=FALSE]*test[,1,drop=FALSE]
NeuralNetwork <- R6Class("NeuralNetwork",
public = list(
X = NULL, Y = NULL,
W1 = NULL, B1 = NULL,
W2 = NULL, B2 = NULL,
Lr = NULL, Neurons = NULL,
output = NULL,
initialize = function(data, real, neurons = 5, rate = 0.0001) {
self$X <- data
self$Neurons <- neurons
self$Lr <- rate
ip_dim = dim(data)[2]
op_dim = dim(real)[2]
self$W1 <- matrix(rnorm(ip_dim*self$Neurons), ip_dim, self$Neurons)
self$W2 <- matrix(rnorm(self$Neurons*op_dim), self$Neurons, op_dim)
self$B1 <- matrix(0, 1, self$Neurons)
self$B2 <- matrix(0, 1, op_dim)
self$Y <- y
}
feedforward = function() {
NeuralNetwork <- R6Class("NeuralNetwork",
public = list(
X = NULL, Y = NULL,
W1 = NULL, B1 = NULL,
W2 = NULL, B2 = NULL,
Lr = NULL, Neurons = NULL,
output = NULL,
initialize = function(data, real, neurons = 5, rate = 0.0001) {
self$X <- data
self$Neurons <- neurons
self$Lr <- rate
ip_dim = dim(data)[2]
op_dim = dim(real)[2]
self$W1 <- matrix(rnorm(ip_dim*self$Neurons), ip_dim, self$Neurons)
self$W2 <- matrix(rnorm(self$Neurons*op_dim), self$Neurons, op_dim)
self$B1 <- matrix(0, 1, self$Neurons)
self$B2 <- matrix(0, 1, op_dim)
self$Y <- y
}
NeuralNetwork <- R6Class("NeuralNetwork",
NeuralNetwork <- R6Class("NeuralNetwork",
public = list(
X = NULL, Y = NULL,
W1 = NULL, B1 = NULL,
W2 = NULL, B2 = NULL,
Lr = NULL, Neurons = NULL,
output = NULL,
initialize = function(data, real, neurons = 5, rate = 0.0001) {
self$X <- data
self$Neurons <- neurons
self$Lr <- rate
ip_dim = dim(data)[2]
op_dim = dim(real)[2]
self$W1 <- matrix(rnorm(ip_dim*self$Neurons), ip_dim, self$Neurons)
self$W2 <- matrix(rnorm(self$Neurons*op_dim), self$Neurons, op_dim)
self$B1 <- matrix(0, 1, self$Neurons)
self$B2 <- matrix(0, 1, op_dim)
self$Y <- y
},
feedforward = function() {
},
backprop = function() {
},
predict = function() {
}
)
)
test_data <- data.matrix(df[,1:4])
View(test_data)
View(test_data)
test_real <- data.matrix(df[,5,drop=FALSE])
View(test_real)
View(test_real)
test_real <- df[,5,drop=FALSE]
View(test_real)
View(test_real)
spread(test_real, key = Species)
spread(test_real, key = Species, value = 1)
test_real <- df[,5:6, drop=FALSE] #%>%
View(test_real)
str(test_real)
as.numeric(test_real[,1,drop=FALSE])
as.numeric(test_real[,1])
test_real$Category <- as.numeric(test_real[,1])
View(test_real)
View(test_real)
View(test_real)
rm(test_real)
test_real$Category <- as.numeric(test_real[,1])
test_data <- data.matrix(df[,1:4])
test_real <- df[,5, drop=FALSE]
test_real$Category <- as.numeric(test_real[,1])
View(test_real)
test_data <- data.matrix(df[,1:4])
test_real <- df[,5, drop=FALSE]
#test_real$Category <- as.numeric(test_real[,1])
?mappings
?model.matrix
dummy.data.frame
model.matrix(~ . + 0, data=test_real, contrasts.arg = lapply(df, contrsts, contrasts=FALSE))
model.matrix(~ . + 0, data=test_real, contrasts.arg = lapply(df, contrasts, contrasts=FALSE))
str(test_real)
levels(test_real)
levels(test_real$Species)
test_data <- data.matrix(df[,1:4])
test_real <- df[,5, drop=FALSE]
for (levels in levels(test_real$Species) {
test_data <- data.matrix(df[,1:4])
test_real <- df[,5, drop=FALSE]
for (levels in levels(test_real$Species)) {
print(levels)
}
#test_real$Category <- as.numeric(test_real[,1])
boop <- test_real
test_data <- data.matrix(df[,1:4])
test_real <- df[,5, drop=FALSE]
for (level in levels(test_real$Species)) {
boop[[level]] <- 1
}
View(boop)
View(boop)
boop <- test_real
